#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PC Control MCP Server

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–µ!
"""

import asyncio
import json
from pathlib import Path


async def test_basic_functionality():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("=== PC Control MCP Server Test ===\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config_path = Path("mcp_config.json")
    if config_path.exists():
        with open(config_path) as f:
            config = json.load(f)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        print(f"   –°–µ—Ä–≤–µ—Ä: {config['mcpServers']['pc-control-mcp']['command']}")
    else:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    server_path = Path("pc_control_mcp.py")
    if server_path.exists():
        print("‚úÖ –§–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        with open(server_path) as f:
            content = f.read()
            required_imports = ["mcp", "psutil", "asyncio", "pathlib"]
            missing = []
            for imp in required_imports:
                if f"import {imp}" not in content and f"from {imp}" not in content:
                    missing.append(imp)
            
            if missing:
                print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–º–ø–æ—Ä—Ç—ã: {', '.join(missing)}")
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    else:
        print("‚ùå –§–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        import mcp
        print("‚úÖ mcp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå mcp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install mcp")
    
    try:
        import psutil
        print("‚úÖ psutil —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"   CPU: {psutil.cpu_count()} —è–¥–µ—Ä")
        print(f"   –ü–∞–º—è—Ç—å: {psutil.virtual_memory().percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
    except ImportError:
        print("‚ùå psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install psutil")
    
    try:
        import pyautogui
        print("‚úÖ pyautogui —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    except ImportError:
        print("‚ö†Ô∏è  pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è GUI –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏)")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –û–¢–ö–õ–Æ–ß–ï–ù–´")
    print("   enable_dangerous_operations = False")
    print("   –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–µ–Ω")
    print("   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    log_dir = Path.home() / ".pc_control_mcp" / "logs"
    if log_dir.exists():
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {log_dir}")
    else:
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ: {log_dir}")
    
    print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ ===")
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
    print("\n‚ö†Ô∏è  –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
    print("3. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏")
    print("4. –ù–ï –≤–∫–ª—é—á–∞–π—Ç–µ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    
    print("\nüìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ Cursor:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Cursor")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ mcp_config.json")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor")
    print("4. –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")


def test_security_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\n=== –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    test_commands = [
        ("ls", True, "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"),
        ("rm -rf /", False, "–û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"),
        ("format c:", False, "–û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ Windows"),
        ("echo test", True, "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    ]
    
    test_paths = [
        ("/home/user/documents", True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å"),
        ("/etc/passwd", False, "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å"),
        ("C:\\Windows\\System32", False, "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å Windows"),
        ("/tmp/test", True, "–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å")
    ]
    
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥:")
    for cmd, expected, desc in test_commands:
        status = "‚úÖ" if expected else "‚ùå"
        print(f"  {status} {cmd} - {desc}")
    
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π:")
    for path, expected, desc in test_paths:
        status = "‚úÖ" if expected else "‚ùå"
        print(f"  {status} {path} - {desc}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ PC Control MCP Server...\n")
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    asyncio.run(test_basic_functionality())
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    test_security_config()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Cursor IDE —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
    print("4. –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")