#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π PC Control MCP Server.
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""

import os
import sys
from pathlib import Path

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
try:
    import psutil
    import yaml
    import aiofiles
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("  pip install psutil pyyaml aiofiles")
    sys.exit(1)

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
try:
    from src import (
        SystemTools,
        ProcessTools,
        FileTools,
        NetworkTools,
        MetricsCollector
    )
    print("‚úÖ –ú–æ–¥—É–ª–∏ PC Control –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

import asyncio
from datetime import datetime

async def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
    
    print("\n" + "="*60)
    print("üöÄ PC Control MCP Server - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    system_tools = SystemTools()
    process_tools = ProcessTools()
    file_tools = FileTools()
    network_tools = NetworkTools()
    metrics = MetricsCollector()
    
    # 1. –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\nüìä –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print("-" * 40)
    
    try:
        info = await system_tools.get_system_info("basic")
        print(f"üñ•Ô∏è  –û–°: {info['platform']} {info['version']}")
        print(f"üè∑Ô∏è  –ò–º—è —Ö–æ—Å—Ç–∞: {info['hostname']}")
        print(f"üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {info['architecture']}")
        print(f"üêç Python: {info['python_version']}")
        
        cpu_info = await system_tools.get_cpu_info()
        print(f"\nüíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_info['brand']}")
        print(f"   –Ø–¥—Ä–∞: {cpu_info['physical_cores']} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö, {cpu_info['logical_cores']} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö")
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {cpu_info['current_freq']:.0f} –ú–ì—Ü")
        
        mem_info = await system_tools.get_memory_info()
        print(f"\nüß† –ü–∞–º—è—Ç—å: {mem_info['total'] / (1024**3):.1f} –ì–ë")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {mem_info['percent']:.1f}%")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    # 2. –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("\n\nüîÑ –¢–û–ü –ü–†–û–¶–ï–°–°–û–í –ü–û CPU:")
    print("-" * 40)
    
    try:
        processes = await process_tools.list_processes({
            'sort_by': 'cpu',
            'limit': 5
        })
        
        for i, proc in enumerate(processes[:5], 1):
            print(f"{i}. {proc['name']:<20} PID: {proc['pid']:<8} CPU: {proc['cpu_percent']:>5.1f}%")
    
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    # 3. –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    print("\n\nüåê –°–ï–¢–ï–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´:")
    print("-" * 40)
    
    try:
        interfaces = await network_tools.get_network_interfaces(include_stats=False)
        
        for iface in interfaces[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            if iface['is_up']:
                print(f"üì° {iface['name']}: UP")
                for addr in iface.get('addresses', []):
                    if addr['family'] == 'AF_INET':
                        print(f"   IP: {addr['address']}")
    
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}")
    
    # 4. –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
    print("\n\nüìÅ –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê:")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file = Path("demo_test.txt")
        content = f"PC Control Demo - {datetime.now()}"
        
        await file_tools.write_file(str(test_file), content)
        print(f"‚úçÔ∏è  –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {test_file}")
        
        # –ß–∏—Ç–∞–µ–º –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ
        read_result = await file_tools.read_file(str(test_file))
        print(f"üìñ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {read_result['content']}")
        
        # –£–¥–∞–ª—è–µ–º
        await file_tools.delete_file(str(test_file))
        print(f"üóëÔ∏è  –§–∞–π–ª —É–¥–∞–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏: {e}")
    
    # 5. –ú–µ—Ç—Ä–∏–∫–∏
    print("\n\nüìà –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print("-" * 40)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        await metrics.start(interval=1)
        print("‚è±Ô∏è  –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω...")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        await asyncio.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        all_metrics = metrics.get_all_metrics()
        
        for name, data in list(all_metrics.items())[:5]:
            if data['current'] is not None:
                print(f"üìä {name}: {data['current']:.2f}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–±–æ—Ä
        await metrics.stop()
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
    
    print("\n" + "="*60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("="*60)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    try:
        asyncio.run(demo())
    except KeyboardInterrupt:
        print("\n\n‚õî –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()