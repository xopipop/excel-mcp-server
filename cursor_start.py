#!/usr/bin/env python3
"""
Cursor IDE MCP Server Launcher
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ PC Control MCP Server –¥–ª—è Cursor IDE
"""

import sys
import os
import subprocess
import json
from pathlib import Path
import platform

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import mcp
        import pydantic
        import yaml
        import psutil
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É pip
        pip_cmd = [sys.executable, "-m", "pip"]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        subprocess.run(pip_cmd + ["install", "-r", "requirements.txt"], check=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def check_venv():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    in_venv = hasattr(sys, 'real_prefix') or (
        hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix
    )
    
    if not in_venv:
        print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        print("   –°–æ–∑–¥–∞—Ç—å: python -m venv venv")
        if platform.system() == "Windows":
            print("   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å: venv\\Scripts\\activate")
        else:
            print("   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å: source venv/bin/activate")
    
    return in_venv

def create_mcp_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    mcp_config_path = Path("mcp.json")
    
    if not mcp_config_path.exists():
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP...")
        
        workspace_folder = Path.cwd()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
        if platform.system() == "Windows":
            python_path = str(workspace_folder / "venv" / "Scripts" / "python.exe")
            path_sep = "\\"
        else:
            python_path = str(workspace_folder / "venv" / "bin" / "python")
            path_sep = "/"
        
        config = {
            "mcpServers": {
                "pc-control": {
                    "command": python_path if Path(python_path).exists() else "python",
                    "args": [str(workspace_folder / "main.py")],
                    "env": {
                        "PYTHONPATH": str(workspace_folder),
                        "PC_CONTROL_CONFIG_PATH": str(workspace_folder / "config"),
                        "PC_CONTROL_LOG_LEVEL": "INFO"
                    },
                    "capabilities": {
                        "tools": True,
                        "prompts": False,
                        "resources": False
                    },
                    "transport": {
                        "type": "stdio"
                    }
                }
            }
        }
        
        with open(mcp_config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP —Å–æ–∑–¥–∞–Ω–∞")
        return True
    
    return False

def test_server():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º main –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        from main import PCControlServer
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def show_cursor_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Cursor IDE"""
    print("\n" + "="*60)
    print("üöÄ PC Control MCP Server –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ Cursor IDE")
    print("="*60)
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Cursor:")
    print("\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Cursor IDE –≤ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    print("2. –§–∞–π–ª mcp.json –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    print("3. –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
    print("   - –û—Ç–∫—Ä–æ–π—Ç–µ Command Palette (Ctrl+Shift+P)")
    print("   - –í–≤–µ–¥–∏—Ç–µ 'MCP: Restart Server'")
    print("   - –í—ã–±–µ—Ä–∏—Ç–µ 'pc-control'")
    
    print("\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    print("   - –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    print("   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏")
    print("   - –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print("   - –°–µ—Ç–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    
    print("\nüìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print('   - "–ü–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"')
    print('   - "–ö–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–∞–º—è—Ç–∏?"')
    print('   - "–ù–∞–π–¥–∏ –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"')
    
    print("\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: CURSOR_SETUP.md")
    print("="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ Cursor IDE MCP Server Launcher")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_python_version():
        sys.exit(1)
    
    print("‚úÖ Python –≤–µ—Ä—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_venv()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    create_mcp_config()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    if not test_server():
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_cursor_instructions()
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if len(sys.argv) > 1 and sys.argv[1] == "--run":
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        subprocess.run([sys.executable, "main.py"])

if __name__ == "__main__":
    main()